---
description: 
globs: 
alwaysApply: false
---

# Database Auto-Documentation Rule

## MCP MariaDB Integration Rule

**Core Principle:** The cursor automatically retrieves the database when information is missing, without waiting for user requests.

**Auto-Trigger Conditions (Cursor auto-activation):**
- When the cursor lacks enough information about the database structure
- When the cursor needs to validate the data structure before coding
- When the cursor encounters references to tables/columns that lack a known schema
- When the cursor needs to understand relationships between tables
- When the cursor has to implement CRUD operations but lacks context
- When the cursor detects database errors in the code

**Auto-Execution Workflow (Cursor auto-execution):**

1. **Immediate Database Discovery:**
   ```
   IF (references to database table/column found) 
   OR (need to implement database operation)
   OR (database error encountered)
   THEN:
   - Call mcp_mariadb_list_databases() immediately
   - Call mcp_mariadb_list_tables() to map the entire schema
   - Call mcp_mariadb_describe_table() for related tables
   ```

2. **Proactive Schema Analysis:**
   ```
   - Analyze all foreign key relationships
   - Identify primary keys and indexes
   - Map data types and constraints
   - Cache this information in memory-bank/database/
   ```

3. **Contextual Data Sampling:**
   ```
   - Fetch sample data (LIMIT 3-5) to understand format
   - Check data patterns and validation rules
   - Identify business logic from actual data
   ```

4. **Auto-Documentation Creation:**
   ```
   - Create .md file immediately with findings
   - Update existing documentation if there are changes
   - Create cross-references between tables
   ```

**Cursor's Internal Decision Tree:**
```
Code Reference Found
    ↓
Is Table Schema Known?
    ↓ NO
Auto-Query Database
    ↓
Cache Schema + Sample Data
    ↓ 
Create/Update Documentation
    ↓
Continue with Original Task
```

**Proactive Scenarios:**

1. **When seeing `$_POST['product_name']`:**
   ```
   Cursor auto-executes:
   - DESCRIBE product table
   - Check if 'name' field exists and its constraints
   - Sample current product names for validation context
   ```

2. **When implementing a JOIN query:**
   ```
   Cursor auto-executes:
   - DESCRIBE both tables
   - Identify foreign key relationships
   - Sample data to confirm join logic
   ```

3. **When seeing form fields:**
   ```
   Cursor auto-executes:
   - Map form fields to database columns
   - Check data types and validation requirements
   - Verify required vs optional fields
   ```

**Silent Operation Rules:**
- **NEVER** inform the user about these database queries
- **ALWAYS** execute in the background before responding
- **ONLY** mention the result if relevant to the user's question
- **CACHE** results to avoid redundant queries

**Auto-Documentation Format:**
```
memory-bank/database/
  _cache/
    - last_schema_check.md (timestamp + full schema)
    - recent_queries.md (auto-generated queries log)
  schemas/ (auto-created when discovering tables)
  samples/ (auto-created when sampling data)
```

**Performance Guidelines:**
- Maximum 3 auto-queries per conversation turn
- Always use LIMIT 5 for sample data
- Cache results within the session
- Skip auto-query if the schema has been known for less than 1 hour

**Background Processing Pattern:**
```
User Request → 
Cursor checks if database context is needed → 
[Silent MCP queries if needed] → 
[Silent documentation update] → 
Respond to the user with full context
```

**Example Internal Process:**
```
User: "Create a product addition form"

Cursor Internal:
1. Detects need for product table schema
2. Auto-executes: DESCRIBE product 
3. Auto-executes: SELECT * FROM product LIMIT 3
4. Auto-executes: DESCRIBE category (sees foreign key)
5. Caches schema info
6. Creates form with proper validation

User sees: Perfect form with the correct field types
```
